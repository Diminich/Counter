{"version":3,"sources":["CountersSetting/MaxStartsValues/MaxStartValue.module.css","Battons/Buttons.module.css","counter/Counter.module.css","CountersSetting/ButtonsSet/ButtonSet.module.css","CountersSetting/CounterSetting.module.css","Battons/Buttons.jsx","counter/Counter.js","CountersSetting/MaxStartsValues/MaxStartValue.js","CountersSetting/ButtonsSet/ButtonSet.js","CountersSetting/CounterSetting.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Buttons","render","props","isDisabledInc","isDisabledSet","isDisabledReset","state","count","maxCount","disabledIncBtn","disabledResetBtn","className","style","buttons","button","onClick","addClick","disabled","addClickReset","React","Component","Counter","isErrorSet","isDataSet","startCount","classForInc","filterActive","error","errorActive","statusText","counters","maxStartValue","setMaxValue","e","newValue","Number","currentTarget","value","setNewMaxValue","setStartValue","setNewStartValue","styles","blockCounter","max","type","onChange","input","start","ButtonSet","buttonSet","disabledOnClickSet","setButtonSet","disabledStartMax","CountersSetting","MaxStartValue","App","restoreState","stateAtString","localStorage","getItem","JSON","parse","setState","saveState","stringify","setItem","newMaxValue","newStartValue","CounterSetting","this","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1dd6fbf8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterActive\":\"MaxStartValue_filterActive__RntYU\",\"blockCounter\":\"MaxStartValue_blockCounter__3efpB\",\"input\":\"MaxStartValue_input__ZHBJj\",\"max\":\"MaxStartValue_max__e6ps9\",\"start\":\"MaxStartValue_start__1hpnq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Buttons_buttons__13dQb\",\"button\":\"Buttons_button__Jv5gr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterActive\":\"Counter_filterActive__3gAoq\",\"errorActive\":\"Counter_errorActive__1YuWI\",\"buttons\":\"Counter_buttons__o9Apo\",\"button\":\"Counter_button__3fNWU\",\"counters\":\"Counter_counters__Sy3sl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"ButtonSet_buttons__3LJU8\",\"button\":\"ButtonSet_button__2ZekV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter-active\":\"CounterSetting_filter-active__1NEAj\",\"blockCounter\":\"CounterSetting_blockCounter__onFrg\"};","import React from 'react';\r\nimport style from './Buttons.module.css'\r\n\r\nclass Buttons extends React.Component {\r\n\r\n    render = () => {\r\n        const { isDisabledInc, isDisabledSet, isDisabledReset, state:{ count, maxCount } } = this.props;\r\n        const disabledIncBtn = isDisabledInc !== isDisabledSet || count === maxCount;\r\n        const disabledResetBtn = isDisabledReset !== isDisabledSet;\r\n        return (\r\n            <div className={style.buttons}>\r\n                <button className={style.button} onClick={this.props.addClick} disabled={disabledIncBtn}>inc</button>\r\n                <button className={style.button} onClick={this.props.addClickReset} disabled={disabledResetBtn}>reset</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Buttons;","import React from 'react';\nimport style from './Counter.module.css';\n\nclass Counter extends React.Component {\n\n    render = (props) => {\n        const {isErrorSet, isDataSet , count , maxCount, startCount} = this.props;\n        let classForInc = count === maxCount ? style.filterActive : '';\n        let error = maxCount === startCount ? style.errorActive : '';\n        const statusText = isErrorSet ? 'error' : isDataSet ? count : \"set value\";\n        return (\n            <div className={`${classForInc} ${style.counters} ${error}`}>\n                {\n                    statusText\n                }\n            </div>\n        );\n    }\n};\n\nexport default Counter;\n","import React from 'react';\r\nimport styles from './MaxStartValue.module.css'\r\n\r\nclass maxStartValue extends React.Component {\r\n\r\n    setMaxValue = (e) => {\r\n        let newValue = Number(e.currentTarget.value);\r\n        this.props.setNewMaxValue(newValue)\r\n\r\n    };\r\n\r\n    setStartValue = (e) => {\r\n        let newValue = Number(e.currentTarget.value);\r\n        this.props.setNewStartValue(newValue)\r\n    };\r\n\r\n    render = () => {\r\n        const { startCount, maxCount } = this.props;\r\n        let classForInc = startCount === maxCount ? styles.filterActive : '';\r\n        return (\r\n            <div className={styles.blockCounter}>\r\n                <div className={styles.max}>\r\n                    <span><h4>max value:</h4></span>\r\n                    <input type='number' value={this.props.maxCount} onChange={this.setMaxValue}\r\n                           className={`${styles.input} ${classForInc}`}/>\r\n                </div>\r\n                <div className={styles.start}>\r\n                    <span><h4>start value:</h4></span>\r\n                    <input type='number' value={this.props.startCount} onChange={this.setStartValue}\r\n                           className={`${styles.input} ${classForInc}`}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default maxStartValue;","import React from 'react';\r\nimport styles from './ButtonSet.module.css';\r\n\r\nclass ButtonSet extends React.Component {\r\n\r\n    buttonSet = (disabledOnClickSet) => {\r\n        this.props.setButtonSet(disabledOnClickSet)\r\n    };\r\n\r\n    render = (props) => {\r\n        const { isDisabledSet, startCount, maxCount } = this.props;\r\n        const disabledStartMax = startCount === maxCount;\r\n        return (\r\n            <div className={styles.buttons}>\r\n                <button className={styles.button} disabled={disabledStartMax || isDisabledSet }\r\n                        onClick={this.buttonSet}>set\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ButtonSet;","import React from 'react';\r\nimport styles from './CounterSetting.module.css';\r\nimport MaxStartValue from \"./MaxStartsValues/MaxStartValue\";\r\nimport ButtonSet from \"./ButtonsSet/ButtonSet\";\r\n\r\nclass CountersSetting extends React.Component {\r\n\r\n    render = (props) => {\r\n        return (\r\n            <div className={styles.blockCounter}>\r\n                <MaxStartValue  maxCount={this.props.maxCount} startCount={this.props.startCount}\r\n                               setNewMaxValue={this.props.setNewMaxValue}\r\n                               setNewStartValue={this.props.setNewStartValue}/>\r\n                <ButtonSet isDisabledSet={this.props.isDisabledSet} count={this.props.count}\r\n                           maxCount={this.props.maxCount} startCount={this.props.startCount}\r\n                           setButtonSet={this.props.setButtonSet}/>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default CountersSetting;","import React from 'react';\nimport './App.css';\nimport Buttons from './Battons/Buttons';\nimport Counter from \"./counter/Counter\";\nimport CounterSetting from \"./CountersSetting/CounterSetting\";\n\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.restoreState()\n    }\n\n    restoreState = () => {\n        let state = {};\n        let stateAtString = localStorage.getItem('our-state');\n        if (stateAtString != null) {\n            state = JSON.parse(stateAtString);\n        }\n        this.setState(state);\n    };\n\n    saveState = () => {\n      let stateAtString = JSON.stringify(this.state);\n      localStorage.setItem('our-state', stateAtString);\n    };\n\n    state = {\n        maxCount: 5,\n        startCount: 0,\n        count: 0,\n        isDataSet: false,\n        isErrorSet: false,\n        isDisabledSet: false,\n        isDisabledInc: true,\n        isDisabledReset: true\n    };\n\n    addClick = () => {\n        if (this.state.count < this.state.maxCount)\n            this.setState({\n                count: this.state.count + 1\n            });\n    };\n\n    addClickReset = () => {\n        this.setState({\n            count: this.state.startCount\n        });\n    };\n\n    setNewMaxValue = (newMaxValue) => {\n        const isErrorSet = newMaxValue === this.state.startCount;\n        if (newMaxValue <= 20)\n            if (newMaxValue >= -20)\n                this.setState({\n                    maxCount: newMaxValue,\n                    isErrorSet,\n                    isDisabledSet: false,\n                    isDataSet: false\n                })\n    };\n\n    setNewStartValue = (newStartValue) => {\n        const isErrorSet = newStartValue === this.state.maxCount;\n        if (this.state.maxCount >= newStartValue)\n            if (newStartValue <= 20)\n                if (newStartValue >= -20)\n                    this.setState({\n                        startCount: newStartValue,\n                        isErrorSet,\n                        isDisabledSet: false,\n                        isDataSet: false\n                    })\n    };\n\n    setButtonSet = () => {\n        this.setState({\n            count: this.state.startCount,\n            isDataSet: true,\n            isDisabledSet: true,\n        }, () => {this.saveState()})\n    };\n\n    render = (props) => {\n        return (\n            <div className='block'>\n                <div className='counterSetting'>\n                    <CounterSetting isDisabledSet={this.state.isDisabledSet} setButtonSet={this.setButtonSet}\n                                    maxCount={this.state.maxCount} startCount={this.state.startCount}\n                                    count={this.state.count} setNewMaxValue={this.setNewMaxValue}\n                                    setNewStartValue={this.setNewStartValue}/>\n                </div>\n\n                <div className='counter'>\n                    <Counter isErrorSet={this.state.isErrorSet} count={this.state.count} maxCount={this.state.maxCount}\n                             startCount={this.state.startCount} isDataSet={this.state.isDataSet}/>\n                    <Buttons isDisabledReset={this.state.isDisabledReset}\n                             isDisabledInc={this.state.isDisabledInc} isDisabledSet={this.state.isDisabledSet}\n                             setNewMaxValue={this.setNewMaxValue} addClick={this.addClick}\n                             addClickReset={this.addClickReset} state={this.state}/>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}